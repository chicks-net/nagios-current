#!/usr/bin/perl

# check_read_only_fs Copyright (C) 2010,2014 Christopher Hicks <chicks.net@gmail.com>
#
# Check that file systems are not read only
#
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# you should have received a copy of the GNU General Public License
# along with this program (or with Nagios);  if not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA

use strict;
use warnings;
use English;
use Getopt::Long;
use vars qw($PROGNAME);
use lib "/usr/lib64/nagios/plugins";
use utils qw (%ERRORS &print_revision &support);

sub print_help ();
sub print_usage ();

my ( $opt_h,  $opt_V );
my ( $result, $message );

$PROGNAME = "check_read_only_fs";

Getopt::Long::Configure('bundling');
GetOptions(
	"V"       => \$opt_V,
	"version" => \$opt_V,
	"h"       => \$opt_h,
	"help"    => \$opt_h,
);

if ($opt_V) {
	print_revision( $PROGNAME, '1.0.0' );
	exit $ERRORS{'OK'};
}

if ($opt_h) {
	print_help();
	exit $ERRORS{'OK'};
}

$result  = 'OK';
$message = '';

open( my $filesystems, "<", "/proc/mounts" ) or do {
	$result  = 'WARNING';
	$message = "could not open /proc/mounts: $ERRNO";
	goto EXIT_RESULTS;
};

while ( my $filesystem = <$filesystems> ) {
	chomp($filesystem);
	my ( $device, $mountpoint, $fstype, $options ) = split( /\s+/, $filesystem );
	my ($writable) = split( /,/, $options );
	next unless $fstype eq 'ext3';

	if ( $writable eq 'ro' ) {
		$result = 'WARNING';
		$message .= ", " if length $message;
		$message .= "$mountpoint ($device) is read only";
	}
}

close($filesystems);

$message = 'all ext3 filesystems are writable' unless length $message;

#if (($opt_c and $age > $opt_c) or ($opt_C and $size < $opt_C)) {
#	$result = 'CRITICAL';
#}
#elsif (($opt_w and $age > $opt_w) or ($opt_W and $size < $opt_W)) {
#	$result = 'WARNING';
#}

EXIT_RESULTS:
{
	print "READ_ONLY_FS $result: $message\n";
	exit $ERRORS{$result};
}

sub check_writable {
	my ($mountpoint) = @_;

	system("touch $mountpoint/x");
	if ($CHILD_ERROR) {    # CHILD_ERROR=$?
		return 1;
	}

	#system("ls -l $mountpoint/x");
	system("rm $mountpoint/x");
	if ($CHILD_ERROR) {
		return 2;
	}
	return 0;
}

sub print_usage {
	print "Usage:\n";
	print "  $PROGNAME\n";
	print "  $PROGNAME [-h | --help]\n";
	print "  $PROGNAME [-V | --version]\n";
	return 1;
}

sub print_help {
	print_revision( $PROGNAME, '1.0.0' );
	print "Copyright (c) 2010 Christopher Hicks\n";
	print_usage();
	print "\n";
	support();
	return 1;
}
